pro verx, x, _extra=e
	tam = !y.crange
 	ymin = tam(0)
 	ymax = tam(1)
 	if (!y.type eq 1) then begin
   	ymin = 10.d0^tam(0)
      ymax = 10.d0^tam(1)
 	endif
 	plots,x,ymin
 	plots,x,ymax,/continue, _extra=e
end

;**********************************
; Return the perc percetile of an array
;**********************************
function percentile, data, perc
	sidx = sort(data)
	ndata = n_elements(data)
	return, data[sidx[perc*ndata / 100]]
end

;**********************************
; Calculate the histogram of an array
;**********************************
function histog, a, nbins=nbins, binsize=binsize, plot=plot, optimbin=optimbin, min=min, max=max, _extra=_extra
	if (not keyword_set(min)) then begin
		mina = min(a)
	endif else begin
		mina = min
	endelse
	if (not keyword_set(max)) then begin
		maxa = max(a)
	endif else begin
		maxa = max
	endelse
	if (keyword_set(optimbin)) then begin
		binopt = optbin(a)
		h = histogram(a,binsize=binopt,min=mina,max=maxa)
		n = n_elements(h)
		x = findgen(n) * binopt + mina
		if (keyword_set(plot)) then begin
	 		plot,x,h, psym=10, _extra=_extra
	 	endif
		return,[[x],[h]]
	endif
		
	if (keyword_set(nbins)) then begin
		h = histogram(a,nbins=nbins,min=mina,max=maxa)	 
	 	x = findgen(nbins)/(nbins-1.d0) * (maxa-mina) + mina
	 	if (keyword_set(plot)) then begin
	 		plot,x,h, psym=10, _extra=_extra
	 	endif
	 	return,[[x],[h]]
	endif
	 
	if (keyword_set(binsize)) then begin
		h = histogram(a,binsize=binsize,min=mina,max=maxa)
		n = n_elements(h)
		x = findgen(n) * binsize + mina
		if (keyword_set(plot)) then begin
	 		plot,x,h, psym=10, _extra=_extra
	 	endif
		return,[[x],[h]]
	endif
	 	 
end


;-----------------------------------------
; Calculates the ratio Ltorus/Lagn
; file: root of the file with the Markov chains
; file_neural: points to the neural.idl file that is generated by Bayesclumpy
; dist: distance in Mpc
;-----------------------------------------
pro derived_quantities, file
	
; Read the Markov chains
	nparam = 9
	openr,2,file+'post_equal_weights.dat',error=err
	if (err ne 0) then begin
		res = dialog_message('Error opening posterior samples.'+string(10B)+$
			'You should run again the inference',/error)
		return
	endif else begin
		nlength = file_lines(file+'post_equal_weights.dat')
		chain = fltarr(nparam+1,nlength)		
		readf,2,chain
		logposterior = reform(chain[nparam,*])
		chain = chain[0:nparam-1,*]
		close,2
	endelse

	N0 = chain[2,*]	
	sigma = chain[0,*]
	i = chain[5,*]

; Pesc
	Nlos = N0 * exp(-(90.d0-i)^2 / sigma^2)
	Pesc = exp(-Nlos)

; f2
	f2 = fltarr(nlength)
	
	beta = findgen(200) / 199.d0 * 90.d0
	mui = cos(beta* !DPI / 180.d0)

	for i = 0, nlength-1 do begin
		mui = cos(beta * !DPI / 180.d0)
		Nt = N0[i] * exp(-beta^2 / sigma[i]^2)
		f2[i] = 1.d0 - int_tabulated(mui, exp(-Nt), /sort)
	endfor

	!p.multi = [0,1,2]
	h = histog(Pesc, nbin=40)
	plot, h[*,0], h[*,1] / max(h[*,1]), xtit='P!desc!n', ytit='Normalized posterior', psym=10
	perc = percentile(Pesc, [50.d0 - 50.d0*erf(1.d0/sqrt(2.d0)), 50.d0, 50.d0 + 50.d0*erf(1.d0/sqrt(2.d0))])
	verx, perc[0], line=1
	verx, perc[1], line=0
	verx, perc[2], line=1
	print, 'Pesc'	
	print, 'Median = ', perc[1]
	print, '-1sigma = ', perc[1]-perc[0]
	print, '+1sigma = ', perc[2]-perc[1]

	h = histog(f2, nbin=40)
	plot, h[*,0], h[*,1] / max(h[*,1]), xtit='f!d2!n', ytit='Normalized posterior', psym=10
	perc = percentile(f2, [50.d0 - 50.d0*erf(1.d0/sqrt(2.d0)), 50.d0, 50.d0 + 50.d0*erf(1.d0/sqrt(2.d0))])
	verx, perc[0], line=1
	verx, perc[1], line=0
	verx, perc[2], line=1
	print, 'f2'	
	print, 'Median = ', perc[1]
	print, '-1sigma = ', perc[1]-perc[0]
	print, '+1sigma = ', perc[2]-perc[1]
	
	stop
end

pro test
	derived_quantities, 'test'
end